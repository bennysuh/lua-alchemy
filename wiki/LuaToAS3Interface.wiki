#summary Describes Lua's interface to access ActionScript

==AS3 Sugar==
The AS3 Sugar provides a Lua-like way to access AS3 class and instance creation, property getter/setters, and function calls.

=== Create AS3 Object ===
{{{
syntax = as3.package.ClassName.new(param1, ..., paramN)
example1 = as3.package.String.new("Hello There")
example2 = as3.package.flash.utils.ByteArray.new()
}}}

=== Get Member Property ===
{{{
value = as3obj.property
example1 = as3.package.Array.new()
len = example.length
}}}

=== Set Member Property ===
{{{
as3obj.property = value
example1 = as3.package.MyClass.new()
example.text = "Hello There"
}}}

=== Call Member Function ===
{{{
return = as3obj.function([param1, ..., paramN])
example1 = as3.Array.new()
example1.push(5)

example2 = as3.package.MyClass.new()
example2.someFunction()
result = example2.anotherFunction(1, "hello")
}}}
Would calling make more sense to use the : syntax common in lua?

=== Get A Class ===
{{{
syntax = as3.package.ClassName.class()
example = as3.package.flash.utils.ByteArray.class()
}}}
You should be able to call static functions or get static methods using this class just as if it were an instance created with new.  But sometimes you may want to directly call into a class without creating an instance like done in ActionScript

=== Get Static Property ===
{{{
syntax = as3.package.ClassName.property
example1 = as3.package.MyClass.class().SOME_CONSTANT
}}}

=== Set Static Property ===
{{{
as3.package.ClassName.property = value
as3.package.MyClass.class().text = "hello"
}}}

=== Call Static Function ===
{{{
as3.package.ClassName.function([param1, ..., paramN])
as3.package.MyClass.class().someFunction()
v = as3.package.MyClass.class().anotherFunction(1, 6, 999)
}}}

==Raw AS3 Interface==
Low level calls to the AS3 interface.  Functions provided through sugar are as3.class(), as3.new(), as3.get(), as3.set(), and as3.call().  as3.release() frees the reference to an AS3 class and is done automatically when an object is garbage collected by Lua.

===as3.flyield()===
Release control to Flash and return to this point on the next timer tick. This currently doesn't allow UI updates, but does prevent the script from timing out over long operations. Note this function is not related to Lua coroutines.

Example
{{{
as3.flyield() 
}}}

===as3.class("[package::]ClassName")===
Return the requested class in package::ClassName form. The return can be used to call static class functions or get/set static properties

Note: Only classes that have been included in the demo can be created. At the very least all of mx.containers and mx.controls has been included along with all the top level and default classes all flash objects get.

Example
{{{
local v = as3.class("flash.utils:ByteArray") 
}}}

===as3.new("[package::]ClassName[, param1,... paramN]")===
Create a new instance of the given class in package::ClassName form.

Note: Only classes that have been included in the demo can be created. At the very least all of mx.containers and mx.controls has been included along with all the top level and default classes all flash objects get.

Example
{{{
local v = as3.new("flash.utils:ByteArray")
local s = as3.new("String", "some string") 
}}}

===as3.release(this)===
Release the given ActionScript object so Flash will do garbage collection.

Example
{{{
local v = as3.new("String")
as3.release(v) 
}}}

===as3.tolua(this, ...)===
Convert ActionScript value to a Lua type if possible (see push_as3_to_lua_stack). Supports multiple arguments. If conversion is not possible, this will return the original AS object. If argument is a Lua value, it is returned intact.

Example
{{{
local v = as3.new("String", "some string")
local s, n = as3.tolua(v, 42) -- s is a Lua string with value "some string", n is a Lua number 42
}}}

===as3.toas3(this, ...)===
Convert Lua value to a AS3 type. Supports multiple arguments. If argument is an AS3 value, it is returned intact.

Example
{{{
local n, f = as3.toas3(42, function() end) -- n is Number 42, f is an AS3 function 
}}}

===as3.get(this, "property")===
Return the requested property of a given ActionScript object. The value is returned as a Lua type if possible (see as3.tolua())

Example
{{{
local v = as3.new("Array")
return as3.get(v, "length") 
}}}

===as3.set(this, "property", value)===
Set the requested property of a given ActionScript object.

Example
{{{
local v = as3.new("mx.components::TextArea")
as3.set(v, "text", "hello") 
}}}

===as3.call(this, "function"[, param1, ... paramN])===
Call a function on a given ActionScript object

Example
{{{
local box = as3.new("mx.containers::Canvas")
as3.call(box, "setStyle", "backgroundColor", "blue") 
}}}

===as3.type(this)===
Returns the ActionScript getQualifiedClassName() for the given value

Example
{{{
local box = as3.new("mx.containers::Canvas")
local type = as3.type(box) --> "mx.containers::Canvas" 
}}}

===as3.namespacecall("package", "function"[, param1, ... paramN])===
Call a namespace level function

Example
{{{
local v = as3.new("wrapperSuite.tests::TestWrapperHelper")
return as3.namespacecall("flash.utils", "getQualifiedClassName", v) --> wrapperSuite.tests::TestWrapperHelper 
}}}

===as3.trace(param1, ... paramN)===
Write to Flash trace output (print-like)

Example
{{{
as3.trace("Hello from Lua Alchemy!") 
}}}

===as3.is_as3_value(obj)===
Returns true if object is as3 value. Returns nil otherwise

Example
{{{
local box = as3.new("mx.containers::Canvas")
assert(as3.is_as3(box) == true) 
}}}