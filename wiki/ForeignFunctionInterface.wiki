#summary Preliminary draft of Foreign Function interface design in Lua Alchemy

See also: TypeConversions

= Prototyping =

*TODO:* to be expanded

Pseudo code on Lua side 

{{{
   -- This probably should register global AS3 as well
   local AS3 = require("AS3") 

   -- Separate import stage is probably not needed
   local myobj = AS3.new("mx.controls.text") 

   myobj.text = "Hello, world!"
   myobj:setVisible(false)
}}}

= Features =

*TODO:* To be expanded

== Lua being able to create arbitrary !ActionScript objects ==

Lua:

{{{ asobj = AS3.new("package.Class") }}}

== Lua being able to call !ActionScript getter ==

Lua:

{{{ a = asobj.field }}}

== Lua being able to call !ActionScript setter ==  

Lua:

{{{ asobj.field = a }}}

== Lua being able to call !ActionScript funciton ==

Lua:

{{{ v.realFunctionName(param1, param2, ... paramN) }}}

== Lua being able to store values of unsupported !ActionScript types ==

As black boxes to pass them back to !ActionScript (see TypeConversions).

== Lua be able to set a Lua function as the event handler for !ActionScript event ==

Lua:

{{{ v.setCallback(function(...) print(...) end) }}}

== !ActionScript has access to Lua data ==

!ActionScript code should be able to manipulate Lua data in global environment, and wherever else our API would allow it (data, stored in Lua registry etc.)

  * Call functions.
  * Access/iterate table values by index without conversion to native data (conversion would not be desirable for some tables, say, for global environment).
  * Store unsupported data types (see TypeConversions) as black boxes to pass back to Lua functions. Note this may trigger problems with garbage collection. We would have to make sure Lua knows we still hold reference to those values.

*TODO:* What else?

*TODO:* Examples

== !ActionScript execute string as Lua script ==

*TODO:* Examples

== !ActionScript able to use a Lua function as an !ActionScript function ==

Callbacks and event handlers could be defined in Lua for !ActionScript

Note that one can not create a function at runtime in AS 3, but
we may inherit our class from Function class so dynamically created
object of that class could be used instead of function.

*TODO:* Examples

== !ActionScript may control Lua garbage collection ==

Our API should expose [http://www.lua.org/manual/5.1/manual.html#lua_gc relevant methods] so it would be possible for !ActionScript to finely control the Lua garbage collector.

This may be done well from Lua scripts (and by calling Lua collectgarbage()), but finer control may be required in corner cases or when third-party Lua script does not expose necessary controls.

*TODO:* Examples

= Lua Sugar =
== Create AS3 Object ==
{{{
syntax = as3.package.ClassName.new(param1, ..., paramN)
example1 = as3.String.new("Hello There")
example2 = as3.flash.utils.ByteArray.new()
}}}
Can we use something like as3.flash.utils::ByteArray.new()? 
Should we have as3.type(v) return in form like "flash.utils.ByteArray"
== Get Member Property ==
{{{
value = as3obj.property
example1 = as3.Array.new()
len = example.length
}}}
== Set Member Property ==
{{{
as3obj.property = value
example1 = as3.MyClass.new()
example.text = "Hello There"
}}}
== Call Member Function ==
{{{
return = as3obj.function([param1, ..., paramN])
example1 = as3.Array.new()
example1.push(5)

example2 = as3.MyClass.new()
example2.someFunction()
result = example2.anotherFunction(1, "hello")
}}}
Would calling make more sense to use the : syntax common in lua?
== Get A Class ==
{{{
syntax = as3.package.ClassName.class()
example = as3.flash.utils.ByteArray.class()
}}}
You should be able to call static functions or get static methods using this class just as if it were an instance created with new.  But sometimes you may want to directly call into a class without creating an instance like done in ActionScript
== Get Static Property ==
{{{
syntax = as3.package.ClassName.property
example1 = as3.MyClass.SOME_CONSTANT
}}}
== Set Static Property ==
{{{
as3.package.ClassName.property = value
as3.MyClass.text = "hello"
}}}
== Call Static Function ==
{{{
as3.package.ClassName.function([param1, ..., paramN])
as3.MyClass.someFunction()
as3.MyClass.anotherFunction(1, 6, 999)
}}}