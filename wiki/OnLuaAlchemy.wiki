#summary A draft for initial project documentation

= Introduction =

This text is a source for the initial project documentation draft and is based on the results of private discussions between me and Robert. It is intended to be split to multiple documents when it would mature a bit.

Some parts are probably too silly and should be removed or rewritten.

Comments are welcome.

== See also ==

  * InitialFileReleases

== Background ==

Lua is a great dynamic programming language, Adobe Flash is a great universal platform for applications and Adobe Alchemy is the tool to bind them together.

[!We should copy-paste some white-paper paragraphs on each technology here, along with proper links]

== Motivation ==

We need Lua Alchemy to...

  * ...To use run-time dynamic programming language (Lua) within the Flash framework. 
  * ...To reuse existing Lua code for the Flash-based utilities
  * ...To get a great cross-platform back-end (Flash) for (simpler) Lua-based games
  * ...To have fun with awesome new technology :-)

= Problems =

  * In Alchemy calls across C / !ActionScript boundary are slow.

  * We've got Lua VM running inside !ActionScript VM. This is also slow. It should be possible to convert Lua bytecode to AS bytecode directly with the help of [http://code.google.com/p/llvm-lua/ llvm-lua]. But see [http://marc.info/?l=lua-l&m=122847990506358&w=2 this post]: currently Alchemy uses too old version of LLVM (2.1), which is incompatible with one in llvm-lua (2.4). We should try to encourage Alchemy developers to upgrade.

= Feature/wish list =

== Foreign Function Interface ==

    * Lua being able to create arbitrary actionscript objects.  Possibe syntax: `v = ActionScript::new("package.Class")`
    * Lua being able to call AS getter.  Possible syntax `a = v.field`
    * Lua being able to call AS setter.  Possible syntax `v.field = a`
    * Lua being able to call AS funciton.  Possible syntax: `v.realFunctionName(param1, param2, ... paramN)`
    * Lua be able to set a Lua funciton as the event handler for AS event.
    * AS call Lua functions
    * AS execute string as Lua script
    * AS able to use a Lua function as an AS funciton (so callbacks and event handlers could be defined in Lua for AS)