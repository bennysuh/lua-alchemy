#summary The list of desired features of Lua Alchemy project

= Target platform =

  * Lua 5.1.4, *unmodified*
  * Flash *10*
  * Flex is *not required* to use core functionality
  * *No paid tools* (e.g. !FlexBuilder) should be required to use library, just the free *command-line SDK tools*.
  * Library must support on *OS X* 10.5+ and Windows *XP*. Support for *Linux* is likely. (Vista support is not guaranteed, but likely.)

= Implementation languages =

  * *!ActionScript* 3
  * ANSI *C* 89 (not C++, not C 99; preferably the "clean C" subset as in Lua -- to allow users to build library as C++ code)
  * *Lua* 5.1

= Core features =

  * A framework to ease integration of Lua into !ActionScript.
  * A layer for doing type conversions from Lua to !ActionScript and vice versa. See TypeConversions.
  * As cross-boundary calls between !ActionScript and C are slow (and C/Lua is fast), we must allow user to write his custom optimized C layer for his specific task, preferably using our low-level functionality like type-conversion. 
  * *TODO:* GenericFFI

= Extra features =

  * Flex *data bindings* support is available as a feature, *optional* for end-user.
  * A library to construct UI as simple as it can be done with MXML. Could be easily done with Lua-based Data Description Language. *TODO:* Elaborate on that.

= Lua Support =

  * Full support for the language.
  * It seems that in the console executable, running locally, almost everything is supported (except `io.popen()` which is due to `generic` make target used; it is fine, since it likely would not work on Windows anyway). So everything in this section is related to the GUI SWFs.
  * *Problem:* Flash sandbox inhibits file IO and system operations.

== Core Lua Libraries ==

  * As much of Core Libraries as possible is to be supported.

=== Stream IO ===

  * In native GUI apps using Lua it is common practice to overload `print()` to print to log (AS `trace` or a hidden log sprite in GUI), and to disable `io.stdin`. Output streams `io.stdout` and `io.stderr` are to be redirected to log or disabled as well. It is fine to follow this practice.

=== Modular sources and File IO ===

To allow comfortable reuse of existing Lua code with Lua Alchemy, we must support following functions:

  * `loadfile()`
  * `dofile()`
  * `require() and package.*` for Lua sources
  * `require() and package.*` for Lua C (or other language) shared library modules, compiled in Alchemy.

*TODO: By Alexander Gladysh, TBD:*

    I propose to put "virtual file system" wrapper on the file (both code and data) access. VFS targets:

       * Files, bundled into the current SWF (read-only). Should be configurable from Lua, C and/or !ActionScript so prefix could be removed to ease porting of existing sources:
         
         {{{ 
        dofile("thisswf://path/file.lua") 
        local file = assert(io.open("thisswf://path/data.dat", "r"))
        AS3.io_set_default_prefix("thisswf://path")
        dofile("file.lua") -- same file as above
        }}}

        Default prefix setting should support all of available options. Note from the Lua point of view AS3.io_set_default_prefix("path") is conceptually the same as os.exec("cd path").
         
       * Files, bundled into other SWFs (read-only; available SWFs added with special API function from Lua, C and/or !ActionScript). *TODO:* Ensure that no AS3 SWF load specifics would inhibit this.

         {{{ 
         AS3.io_add_swf("swf-name", "URI")
         dofile("swf://swf-name/path/file.lua") 
         local file = assert(io.open("swf://swf-name/path/data.dat", "r"))
         }}}

       * Files, located on the local Flash storage (read/write).

         {{{ 
         dofile("storage://path/file.lua")
         local file = assert(io.open("storage://path/data.dat", "r+"))
         }}}

         NOTE: Loading code from local storage seems to be silly and insecure. Probably we should disable it.

       * Files, uploaded by user with open/save file dialog (read for open/write for save).

         {{{ 
         dofile("open://") -- A lua script runner
         local read_file = assert(io.open("open://", "r"))
         local write_file = assert(io.open("save://", "w"))
         }}}

         NOTE: I do not like this filename-less notation much. Any ideas?
         TODO: There could be problems with that save:// files would likely to allowed to save only once. So the actual save is to be done only when handle is closed.

       * Files, located in the file system (read/write within sandbox limits; no limits in console mode).

         {{{ 
         dofile("file:///Users/Me/myfile.lua")
         local file = assert(io.open("C:\\Windows\\system32\\drivers\\etc\\hosts", "r+"))
         }}}

Also we should separately consider require()'ing C modules, built with
Alchemy; both built-in into our swf and probably loaded from external
swfs as well.

== System Library ==

*TODO*

= Foreign Function Interface =

== Lua being able to create arbitrary !ActionScript objects ==

Lua:
{{{ asobj = ActionScript::new("package.Class") }}}

== Lua being able to call !ActionScript getter ==

Lua:
{{{ a = asobj.field }}}

== Lua being able to call !ActionScript setter ==  

Lua:
{{{ asobj.field = a }}}

== Lua being able to call !ActionScript funciton ==

Lua:
{{{ v.realFunctionName(param1, param2, ... paramN) }}}

== Lua be able to set a Lua function as the event handler for !ActionScript event ==

Lua:
{{{ v.setCallback(function(...) print(...) end) }}}

== !ActionScript call Lua functions ==

*TODO*

== !ActionScript execute string as Lua script ==

*TODO*

== !ActionScript able to use a Lua function as an !ActionScript function ==

So callbacks and event handlers could be defined in Lua for AS!ActionScript

*TODO*