#summary The list of desired features of Lua Alchemy project

= Target platform =

  * Lua 5.1.4, *unmodified*
  * Flash *10*
  * Flex is *not required* to use core functionality
  * *No paid tools* (e.g. !FlexBuilder) should be required to use library, just the free *command-line SDK tools*.
  * Library must support on *OS X* 10.5+ and Windows *XP*. Support for *Linux* is likely. (Vista support is not guaranteed, but likely.)

= Implementation languages =

  * *!ActionScript* 3
  * ANSI *C* 89 (not C++, not C 99; preferably the "clean C" subset as in Lua -- to allow users to build library as C++ code)
  * *Lua* 5.1

= Core features =

  * A framework to ease integration of Lua into !ActionScript.
  * A layer for doing type conversions from Lua to !ActionScript and vice versa. See TypeConversions.
  * As cross-boundary calls between !ActionScript and C are slow (and C/Lua is fast), we must allow user to write his custom optimized C layer for his specific task, preferably using our low-level functionality like type-conversion. 

= Extra features =

  * Flex *data bindings* support is available as a feature, *optional* for end-user.
  * A library to construct UI as simple as it can be done with MXML. Could be easily done with Lua-based Data Description Language. *TODO:* Elaborate on that.

= Lua Support =

  * Full support for the language.
  * It seems that in the console executable, running locally, almost everything is supported (except `io.popen()` which is due to `generic` make target used; it is fine, since it likely would not work on Windows anyway). So everything in this section is related to the GUI SWFs.
  * *Problem:* Flash sandbox inhibits file IO and system operations.

== Core Lua Libraries ==

  * As much of Core Libraries as possible is to be supported.

=== Stream IO ===

  * In native GUI apps using Lua it is common practice to overload `print()` to print to log (AS `trace` or a hidden log sprite in GUI), and to disable `io.stdin`. Output streams `io.stdout` and `io.stderr` are to be redirected to log or disabled as well. It is fine to follow this practice.

=== Modular sources ===

== File IO ==

= Foreign Function Interface =

== Lua being able to create arbitrary !ActionScript objects ==

Lua:
{{{ asobj = ActionScript::new("package.Class") }}}

== Lua being able to call !ActionScript getter ==

Lua:
{{{ a = asobj.field }}}

== Lua being able to call !ActionScript setter ==  

Lua:
{{{ asobj.field = a }}}

== Lua being able to call !ActionScript funciton ==

Lua:
{{{ v.realFunctionName(param1, param2, ... paramN) }}}

== Lua be able to set a Lua function as the event handler for !ActionScript event ==

Lua:
{{{ v.setCallback(function(...) print(...) end) }}}

== !ActionScript call Lua functions ==

*TODO*

== !ActionScript execute string as Lua script ==

*TODO*

== !ActionScript able to use a Lua function as an !ActionScript function ==

So callbacks and event handlers could be defined in Lua for AS!ActionScript

*TODO*